<?xml version='1.0' encoding='utf-8'?>
<!--

  This file is managed/autogenerated by salt.
  Manual changes risk being overwritten.

  Modify the salt pillar for the tomcat formula
  that generates this file instead.

-->
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<Server port="{{ instance.shutdown_port }}" shutdown="SHUTDOWN">
  <!-- Security listener. Documentation at /docs/config/listeners.html
  <Listener className="org.apache.catalina.security.SecurityListener" />
  -->
  {% if instance.native_enabled is not defined or instance.native_enabled %}
  <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
  {% endif %}
  <!--Initialize Jasper prior to webapps are loaded. Documentation at /docs/jasper-howto.html -->
  <Listener className="org.apache.catalina.core.JasperListener" />
  <!-- Prevent memory leaks due to use of particular java/javax APIs-->
  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
  <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

  <GlobalNamingResources>
    <Resource name="UserDatabase" auth="Container"
              type="org.apache.catalina.UserDatabase"
              description="User database that can be updated and saved"
              factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
              pathname="conf/tomcat-users.xml" />
  </GlobalNamingResources>
  <Service name="Catalina">
    {% if instance.connectors is defined %}
      {% for connector_name, connector in instance.connectors.iteritems() %}
      <Connector
        {% for id, param in connector.iteritems() %}
                   {{ id }}="{{ param }}"
        {% endfor %}
      />
      {% endfor %}
    {% else %}
      <Connector port="8080" protocol="HTTP/1.1"
                 connectionTimeout="20000"
                 URIEncoding="UTF-8"
                 redirectPort="8443"
      />
    {% endif %}

    <Engine name="Catalina" jvmRoute="{{instance.engine_jvmroute}}" defaultHost="localhost">

  {# {% if instance.cluster is defined and instance.cluster.enabled %} #}
  {% if instance.cluster.get('enabled',False) %}
  {% set fqdn = grains['fqdn'] %}
        <Cluster channelSendOptions="8" channelStartOptions="3" className="org.apache.catalina.ha.tcp.SimpleTcpCluster">
          <Manager className="org.apache.catalina.ha.session.DeltaManager" expireSessionsOnShutdown="false" notifyListenersOnReplication="true" notifySessionListenersOnReplication="true"/>
          <Channel className="org.apache.catalina.tribes.group.GroupChannel">
            <Receiver address="{{ fqdn }}" autoBind="0" className="org.apache.catalina.tribes.transport.nio.NioReceiver" maxThreads="6" port="{{instance.cluster.cluster_port}}" selectorTimeout="5000"/>
            <Sender className="org.apache.catalina.tribes.transport.ReplicationTransmitter">
              <Transport className="org.apache.catalina.tribes.transport.nio.PooledParallelSender"/>
            </Sender>
            <Interceptor className="org.apache.catalina.tribes.group.interceptors.TcpPingInterceptor"/>
            <Interceptor className="org.apache.catalina.tribes.group.interceptors.TcpFailureDetector"/>
            <Interceptor className="org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor"/>
            <Interceptor className="org.apache.catalina.tribes.group.interceptors.StaticMembershipInterceptor">
            {# {% for id, member in instance.cluster.members.iteritems() %} #} 
            {% for id, member in instance.cluster.get('members',[]).iteritems() %}  
              {% if member.host.lower() != fqdn.lower() %}
              <Member className="org.apache.catalina.tribes.membership.StaticMember" domain="{{instance.cluster.cluster_domain}}" host="{{ member.host }}" port="{{instance.cluster.cluster_port}}" securePort="-1" uniqueId="{{ member.unique_id }}"/>
              {% endif %}
             {% endfor %}
            </Interceptor>
          </Channel>
          <Valve className="org.apache.catalina.ha.tcp.ReplicationValve" filter=".*\.gif|.*\.js|.*\.jpeg|.*\.jpg|.*\.png|.*\.htm|.*\.html|.*\.css|.*\.txt|.*\.pdf"/>
          <Valve className="org.apache.catalina.ha.session.JvmRouteBinderValve"/>
          <ClusterListener className="org.apache.catalina.ha.session.JvmRouteSessionIDBinderListener"/>
          <ClusterListener className="org.apache.catalina.ha.session.ClusterSessionListener"/>
        </Cluster>
  {% endif %}

      <!-- Use the LockOutRealm to prevent attempts to guess user passwords
           via a brute-force attack -->
      <Realm className="org.apache.catalina.realm.LockOutRealm">
        <!-- This Realm uses the UserDatabase configured in the global JNDI
             resources under the key "UserDatabase".  Any edits
             that are performed against this UserDatabase are immediately
             available for use by the Realm.  -->
        <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
               resourceName="UserDatabase"/>
      </Realm>
      
      {% if instance.sites is defined %}
      {% for id, site in instance.sites.iteritems()  %}
      {%- set host_name = site.name if site.name is defined else id %}
      <Host name="{{ host_name }}"
            appBase="{{ site.appBase }}"
            debug="{{ site.debug }}"
            unpackWARs="{{ site.unpackWARs }}">
            <Context path="{{ site.path }}"
                     docBase="{{ site.docBase }}"
                     debug="{{ site.debug }}"
                     reloadable="{{ site.reloadable }}"
            />
            {% if site.alias is defined %}
            <Alias>{{ site.alias }}</Alias>
            {% endif %}
            <Logger className="org.apache.catalina.logger.FileLogger"
                    directory="logs"
                    prefix="{{ host_name }}\_log."
                    suffix=".txt"
                    timestamp="true"
            />
            <Valve className="org.apache.catalina.valves.RemoteIpValve" proxiesHeader="X-Forwarded-By" remoteIpHeader="X-Forwarded-For"/>
            <Valve className="org.apache.catalina.valves.CrawlerSessionManagerValve" crawlerUserAgents=".*SearchBlox.*|.*gsa-crawler.*|.*ipMonitor.*|.*[bB]ot.*|.*Yahoo! Slurp.*|.*Feedfetcher-Google.*" sessionInactiveInterval="600"/>
      </Host>
      {% endfor %}

      {% else %}
        <Host name="localhost"  appBase="webapps" unpackWARs="true" autoDeploy="true">
        <Valve className="org.apache.catalina.valves.RemoteIpValve" proxiesHeader="X-Forwarded-By" remoteIpHeader="X-Forwarded-For"/>
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="localhost_access_log." suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />
        <Valve className="org.apache.catalina.valves.CrawlerSessionManagerValve" crawlerUserAgents=".*SearchBlox.*|.*gsa-crawler.*|.*ipMonitor.*|.*[bB]ot.*|.*Yahoo! Slurp.*|.*Feedfetcher-Google.*" sessionInactiveInterval="600"/>
        </Host>
      {% endif %}
    </Engine>
  </Service>
</Server>
